INSTALLATION FOR WINDOWS
===============================================================================

SOFTWARE PREREQUISITES
-------------------------------------------------------------------------------

- Git

    Download and install from https://git-scm.com/
    The default installation settings are fine.
    
- Python 3.5 or higher

    Download and install from https://www.python.org/
    Tick the box "Add Python 3.6 to PATH".
    
- Arduino tools

    Download and install the Arduino IDE from https://www.arduino.cc/en/Main/Software
    The default installation settings are fine.

- Windows environment variables
    
    Tell the build system about the Arduino path, as follows.

    Windows Start button
        -> search for "environment variables"
        -> run "Edit the system environment variables"
        ... takes you to Control Panel / System properties
        -> Environment Variables

    Set the following environment variables, as per
    https://playground.arduino.cc/Code/WindowsCommandLine:

        ARDUINO_PATH        C:\Program Files (x86)\Arduino
        ARDUINO_MCU	        the name of your microcontroller (e.g., atmega168)
                ... atmega328p for Arduino Uno; see
                    https://store.arduino.cc/arduino-uno-rev3
                    http://forum.arduino.cc/index.php?topic=145065.0
                    Arduino/hardware/arduino/avr/boards.txt  # especially this
        ARDUINO_PROGRAMMER  the name of the programmer you wish to use (usually stk500)
                ... we do NOT want to use one; they are external devices
                    ... https://www.arduino.cc/en/Hacking/Programmer
                ... so use "arduino"
                    ... based on "-carduino" in https://github.com/Robot-Will/Stino/issues/346
                    ... and C:\Program Files (x86)\Arduino\hardware\tools\avr\etc\avrdude.conf
                    ... and Arduino/hardware/arduino/avr/boards.txt  # especially this
        ARDUINO_FCPU	    the clock frequency of your microcontroller (usually 16000000 for atmega168)
                ... also for the atmega328p (16 MHz):
                    http://forum.arduino.cc/index.php?topic=27599.0
        ARDUINO_COMPORT	    the port to which your programmer is connected (e.g. COM1,  COM2, etc.)
                ... see Device Manager / Ports (COM & LPT)
                ... COM5 is typical for USB
        ARDUINO_BURNRATE    the baud rate at which the download is to occur
                ... for USB, the COM port is set to 9600, but use 115200 as per
                    Arduino/hardware/arduino/avr/boards.txt, or use 0 to leave
                    at the avrdude Arduino default, which is 115200 (see
                    main.c and arduino.c in the avrdude source).

    Optionally, add this to the PATH (for avrdude):
        C:\Program Files (x86)\Arduino\hardware\tools\avr\bin

OPTIONAL
-------------------------------------------------------------------------------

- You will probably want a terminal emulator, e.g.

    TeraTerm: https://osdn.net/projects/ttssh2/

- You may want to install a text editor, such as:

    Komodo Edit: https://www.activestate.com/komodo-edit
    TextPad: https://www.textpad.com/

- You may want to install PyCharm (https://www.jetbrains.com/pycharm/).

- On the general principle that Windows is a bit rubbish for development (e.g.
  "find file by content quickly, anyone?"), you may want to install Cygwin from
  https://www.cygwin.com/ .


INSTALLING THE ECG PROGRAM
-------------------------------------------------------------------------------

- Fetch the ECG code. Run a command prompt, and enter these commands:

    cd /d %USERPROFILE%
    git clone https://github.com/RudolfCardinal/ecg_arduino

- Create a Python virtual environment. In the command prompt:

    python --version
    REM ... Check this is 3.5 or higher
    REM - If it's older, you have the wrong version of Python on your PATH.
    REM - If it doesn't run, you don't have the installed version of Python on your PATH.
    
    pip install virtualenv
    REM ... This installs virtualenv into the system-wide Python environment.

    cd /d %USERPROFILE%
    python -m virtualenv venv_ecg
    REM ... This creates a new virtual environment for the ECG software.
    
- Activate the virtual environment and install packages. In the command prompt again:

    venv_ecg\Scripts\activate
    pip install -r ecg_arduino\requirements.txt


CHECKING COMMUNICATIONS WITH THE ARDUINO
-------------------------------------------------------------------------------

- Assuming you have put avrdude on the PATH (as above), use a command like
  this:

    avrdude -c arduino -p atmega328p -P COM5 -C "C:\Program Files (x86)\Arduino\hardware\tools\avr\etc\avrdude.conf"
            ^^         ^^            ^^      ^^
            protocol   device        port    configuration file

  If it's working, you should see this:

    avrdude: AVR device initialized and ready to accept instructions
    Reading | ################################################## | 100% 0.00s
    avrdude: Device signature = 0x1e950f (probably m328p)
    avrdude: safemode: Fuses OK (E:00, H:00, L:00)
    avrdude done.  Thank you.

  Since USB manages its own serial rate, you should not specify the "-b" rate
  (e.g. "-b 9600"). Possibly there is a value that works, but generally you
  see this sort of error:

    avrdude: stk500_recv(): programmer is not responding
    avrdude: stk500_getsync() attempt 1 of 10: not in sync: resp=0x00

  To see all options, use "avrdude -?".


COMPILING AND UPLOADING THE ECG PROGRAM TO THE ARDUINO
-------------------------------------------------------------------------------
